# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/PlanningRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planning_msgs.msg

class PlanningRequest(genpy.Message):
  _md5sum = "df3573d1c696fbd0479c044049b5e3a0"
  _type = "planning_msgs/PlanningRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Scoring methods
string OSPT="ospt"
string PSPT="pspt"
string LPFO="lpfo"

# Request fields
string pattern
Binding[] bindings
string[] scoring_methods

================================================================================
MSG: planning_msgs/Binding
# Constants for determining the datatype encapsulated in the `value` string
int32 STRING=0
int32 INT=1
int32 FLOAT=2
int32 SYMBOL=3

# The actual fields
int32 type
string key
string value
"""
  # Pseudo-constants
  OSPT = r'"ospt"'
  PSPT = r'"pspt"'
  LPFO = r'"lpfo"'

  __slots__ = ['pattern','bindings','scoring_methods']
  _slot_types = ['string','planning_msgs/Binding[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pattern,bindings,scoring_methods

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pattern is None:
        self.pattern = ''
      if self.bindings is None:
        self.bindings = []
      if self.scoring_methods is None:
        self.scoring_methods = []
    else:
      self.pattern = ''
      self.bindings = []
      self.scoring_methods = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.pattern
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bindings)
      buff.write(_struct_I.pack(length))
      for val1 in self.bindings:
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.scoring_methods)
      buff.write(_struct_I.pack(length))
      for val1 in self.scoring_methods:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bindings is None:
        self.bindings = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pattern = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bindings = []
      for i in range(0, length):
        val1 = planning_msgs.msg.Binding()
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.bindings.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scoring_methods = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.scoring_methods.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.pattern
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.bindings)
      buff.write(_struct_I.pack(length))
      for val1 in self.bindings:
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.scoring_methods)
      buff.write(_struct_I.pack(length))
      for val1 in self.scoring_methods:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bindings is None:
        self.bindings = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pattern = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bindings = []
      for i in range(0, length):
        val1 = planning_msgs.msg.Binding()
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.bindings.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scoring_methods = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.scoring_methods.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_msgs/PlanningResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planning_msgs.msg

class PlanningResponse(genpy.Message):
  _md5sum = "6dbce147047db5e837c94aabe63a5256"
  _type = "planning_msgs/PlanningResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Response fields
Plan[] plans
string[] unused_bindings


================================================================================
MSG: planning_msgs/Plan
Step[] steps

# This score is the same as the root step's score; placing it here as
# well out of convience reasons for the receiving node.
float32 score
float32[] duration

================================================================================
MSG: planning_msgs/Step
int32 id
int32 parent
string type
string pattern
string[] call_pattern
Binding[] bindings
float32 score
float32[] duration
================================================================================
MSG: planning_msgs/Binding
# Constants for determining the datatype encapsulated in the `value` string
int32 STRING=0
int32 INT=1
int32 FLOAT=2
int32 SYMBOL=3

# The actual fields
int32 type
string key
string value
"""
  __slots__ = ['plans','unused_bindings']
  _slot_types = ['planning_msgs/Plan[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plans,unused_bindings

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.plans is None:
        self.plans = []
      if self.unused_bindings is None:
        self.unused_bindings = []
    else:
      self.plans = []
      self.unused_bindings = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.plans)
      buff.write(_struct_I.pack(length))
      for val1 in self.plans:
        length = len(val1.steps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.steps:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.id, _x.parent))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.pattern
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.call_pattern)
          buff.write(_struct_I.pack(length))
          for val3 in val2.call_pattern:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
          length = len(val2.bindings)
          buff.write(_struct_I.pack(length))
          for val3 in val2.bindings:
            _x = val3.type
            buff.write(_get_struct_i().pack(_x))
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.score
          buff.write(_get_struct_f().pack(_x))
          length = len(val2.duration)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.duration))
        _x = val1.score
        buff.write(_get_struct_f().pack(_x))
        length = len(val1.duration)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.duration))
      length = len(self.unused_bindings)
      buff.write(_struct_I.pack(length))
      for val1 in self.unused_bindings:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.plans is None:
        self.plans = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plans = []
      for i in range(0, length):
        val1 = planning_msgs.msg.Plan()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.steps = []
        for i in range(0, length):
          val2 = planning_msgs.msg.Step()
          _x = val2
          start = end
          end += 8
          (_x.id, _x.parent,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.pattern = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.pattern = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.call_pattern = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.call_pattern.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.bindings = []
          for i in range(0, length):
            val3 = planning_msgs.msg.Binding()
            start = end
            end += 4
            (val3.type,) = _get_struct_i().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            val2.bindings.append(val3)
          start = end
          end += 4
          (val2.score,) = _get_struct_f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.duration = s.unpack(str[start:end])
          val1.steps.append(val2)
        start = end
        end += 4
        (val1.score,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.duration = s.unpack(str[start:end])
        self.plans.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unused_bindings = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.unused_bindings.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.plans)
      buff.write(_struct_I.pack(length))
      for val1 in self.plans:
        length = len(val1.steps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.steps:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.id, _x.parent))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.pattern
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.call_pattern)
          buff.write(_struct_I.pack(length))
          for val3 in val2.call_pattern:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
          length = len(val2.bindings)
          buff.write(_struct_I.pack(length))
          for val3 in val2.bindings:
            _x = val3.type
            buff.write(_get_struct_i().pack(_x))
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.score
          buff.write(_get_struct_f().pack(_x))
          length = len(val2.duration)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.duration.tostring())
        _x = val1.score
        buff.write(_get_struct_f().pack(_x))
        length = len(val1.duration)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.duration.tostring())
      length = len(self.unused_bindings)
      buff.write(_struct_I.pack(length))
      for val1 in self.unused_bindings:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.plans is None:
        self.plans = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plans = []
      for i in range(0, length):
        val1 = planning_msgs.msg.Plan()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.steps = []
        for i in range(0, length):
          val2 = planning_msgs.msg.Step()
          _x = val2
          start = end
          end += 8
          (_x.id, _x.parent,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.pattern = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.pattern = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.call_pattern = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.call_pattern.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.bindings = []
          for i in range(0, length):
            val3 = planning_msgs.msg.Binding()
            start = end
            end += 4
            (val3.type,) = _get_struct_i().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            val2.bindings.append(val3)
          start = end
          end += 4
          (val2.score,) = _get_struct_f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.duration = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.steps.append(val2)
        start = end
        end += 4
        (val1.score,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.duration = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.plans.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.unused_bindings = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.unused_bindings.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class Planning(object):
  _type          = 'planning_msgs/Planning'
  _md5sum = '63b30a5b2209d6af2bdcdcf4940aca3f'
  _request_class  = PlanningRequest
  _response_class = PlanningResponse
