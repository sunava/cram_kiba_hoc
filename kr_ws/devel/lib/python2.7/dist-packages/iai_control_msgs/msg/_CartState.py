# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iai_control_msgs/CartState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CartState(genpy.Message):
  _md5sum = "5fdee31b50bcb0376e81235255a47390"
  _type = "iai_control_msgs/CartState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Report the state of the cartesian controller
bool running   # Is the controller active?
float64 error  # Represents distance to the goal
float64 error_pos # norm of the cartesian position error
float64 error_rot # norm of the cartesian orientation error
float64 vel_norm # norm of the commanded velocity vector
float64 elapsed_seconds # time since the last goal was set

#geometry_msgs/PoseStamped goal_pose   # Has pose of the running goal
string ee_frame_name  # Frame at the end of the kin. chain
string base_frame_name # Frame at the beginning of the kin. chain


"""
  __slots__ = ['running','error','error_pos','error_rot','vel_norm','elapsed_seconds','ee_frame_name','base_frame_name']
  _slot_types = ['bool','float64','float64','float64','float64','float64','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       running,error,error_pos,error_rot,vel_norm,elapsed_seconds,ee_frame_name,base_frame_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CartState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.running is None:
        self.running = False
      if self.error is None:
        self.error = 0.
      if self.error_pos is None:
        self.error_pos = 0.
      if self.error_rot is None:
        self.error_rot = 0.
      if self.vel_norm is None:
        self.vel_norm = 0.
      if self.elapsed_seconds is None:
        self.elapsed_seconds = 0.
      if self.ee_frame_name is None:
        self.ee_frame_name = ''
      if self.base_frame_name is None:
        self.base_frame_name = ''
    else:
      self.running = False
      self.error = 0.
      self.error_pos = 0.
      self.error_rot = 0.
      self.vel_norm = 0.
      self.elapsed_seconds = 0.
      self.ee_frame_name = ''
      self.base_frame_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B5d().pack(_x.running, _x.error, _x.error_pos, _x.error_rot, _x.vel_norm, _x.elapsed_seconds))
      _x = self.ee_frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.base_frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.running, _x.error, _x.error_pos, _x.error_rot, _x.vel_norm, _x.elapsed_seconds,) = _get_struct_B5d().unpack(str[start:end])
      self.running = bool(self.running)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ee_frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ee_frame_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.base_frame_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B5d().pack(_x.running, _x.error, _x.error_pos, _x.error_rot, _x.vel_norm, _x.elapsed_seconds))
      _x = self.ee_frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.base_frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.running, _x.error, _x.error_pos, _x.error_rot, _x.vel_norm, _x.elapsed_seconds,) = _get_struct_B5d().unpack(str[start:end])
      self.running = bool(self.running)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ee_frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ee_frame_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.base_frame_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B5d = None
def _get_struct_B5d():
    global _struct_B5d
    if _struct_B5d is None:
        _struct_B5d = struct.Struct("<B5d")
    return _struct_B5d
