// Generated by gencpp from file json_prolog_msgs/PrologQueryRequest.msg
// DO NOT EDIT!


#ifndef JSON_PROLOG_MSGS_MESSAGE_PROLOGQUERYREQUEST_H
#define JSON_PROLOG_MSGS_MESSAGE_PROLOGQUERYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace json_prolog_msgs
{
template <class ContainerAllocator>
struct PrologQueryRequest_
{
  typedef PrologQueryRequest_<ContainerAllocator> Type;

  PrologQueryRequest_()
    : mode(0)
    , id()
    , query()  {
    }
  PrologQueryRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , id(_alloc)
    , query(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _query_type;
  _query_type query;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ALL_SOLUTIONS)
  #undef ALL_SOLUTIONS
#endif
#if defined(_WIN32) && defined(INCREMENTAL)
  #undef INCREMENTAL
#endif

  enum {
    ALL_SOLUTIONS = 0,
    INCREMENTAL = 1,
  };


  typedef boost::shared_ptr< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PrologQueryRequest_

typedef ::json_prolog_msgs::PrologQueryRequest_<std::allocator<void> > PrologQueryRequest;

typedef boost::shared_ptr< ::json_prolog_msgs::PrologQueryRequest > PrologQueryRequestPtr;
typedef boost::shared_ptr< ::json_prolog_msgs::PrologQueryRequest const> PrologQueryRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator1> & lhs, const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.id == rhs.id &&
    lhs.query == rhs.query;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator1> & lhs, const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace json_prolog_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae1d940ff32be0f4c9af16fc85baab7a";
  }

  static const char* value(const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae1d940ff32be0f4ULL;
  static const uint64_t static_value2 = 0xc9af16fc85baab7aULL;
};

template<class ContainerAllocator>
struct DataType< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "json_prolog_msgs/PrologQueryRequest";
  }

  static const char* value(const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The following constants, together with the `mode' slot, allow for\n"
"# configuring how the prolog engine is supposed to generate\n"
"# solutions. ALL_SOLUTIONS indicates that the query should be\n"
"# processed completely immediately. INCREMENTAL indicates that only\n"
"# one solution should be generated at one time whenever the\n"
"# next_solution is called.\n"
"\n"
"byte ALL_SOLUTIONS=0\n"
"byte INCREMENTAL=1\n"
"\n"
"byte mode\n"
"string id\n"
"string query\n"
;
  }

  static const char* value(const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.id);
      stream.next(m.query);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrologQueryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::json_prolog_msgs::PrologQueryRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "query: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.query);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSON_PROLOG_MSGS_MESSAGE_PROLOGQUERYREQUEST_H
