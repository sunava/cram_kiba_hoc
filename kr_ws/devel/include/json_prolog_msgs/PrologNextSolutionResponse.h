// Generated by gencpp from file json_prolog_msgs/PrologNextSolutionResponse.msg
// DO NOT EDIT!


#ifndef JSON_PROLOG_MSGS_MESSAGE_PROLOGNEXTSOLUTIONRESPONSE_H
#define JSON_PROLOG_MSGS_MESSAGE_PROLOGNEXTSOLUTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace json_prolog_msgs
{
template <class ContainerAllocator>
struct PrologNextSolutionResponse_
{
  typedef PrologNextSolutionResponse_<ContainerAllocator> Type;

  PrologNextSolutionResponse_()
    : status(0)
    , solution()  {
    }
  PrologNextSolutionResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , solution(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _solution_type;
  _solution_type solution;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_SOLUTION)
  #undef NO_SOLUTION
#endif
#if defined(_WIN32) && defined(WRONG_ID)
  #undef WRONG_ID
#endif
#if defined(_WIN32) && defined(QUERY_FAILED)
  #undef QUERY_FAILED
#endif
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif

  enum {
    NO_SOLUTION = 0,
    WRONG_ID = 1,
    QUERY_FAILED = 2,
    OK = 3,
  };


  typedef boost::shared_ptr< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PrologNextSolutionResponse_

typedef ::json_prolog_msgs::PrologNextSolutionResponse_<std::allocator<void> > PrologNextSolutionResponse;

typedef boost::shared_ptr< ::json_prolog_msgs::PrologNextSolutionResponse > PrologNextSolutionResponsePtr;
typedef boost::shared_ptr< ::json_prolog_msgs::PrologNextSolutionResponse const> PrologNextSolutionResponseConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator1> & lhs, const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.solution == rhs.solution;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator1> & lhs, const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace json_prolog_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13aa54b7380a45414b5c48869ecbe7c8";
  }

  static const char* value(const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13aa54b7380a4541ULL;
  static const uint64_t static_value2 = 0x4b5c48869ecbe7c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "json_prolog_msgs/PrologNextSolutionResponse";
  }

  static const char* value(const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte NO_SOLUTION = 0\n"
"byte WRONG_ID = 1\n"
"byte QUERY_FAILED = 2\n"
"byte OK = 3\n"
"\n"
"byte status\n"
"string solution\n"
"\n"
;
  }

  static const char* value(const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.solution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrologNextSolutionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::json_prolog_msgs::PrologNextSolutionResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "solution: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.solution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSON_PROLOG_MSGS_MESSAGE_PROLOGNEXTSOLUTIONRESPONSE_H
