// Generated by gencpp from file rosprolog/MessageJSON.msg
// DO NOT EDIT!


#ifndef ROSPROLOG_MESSAGE_MESSAGEJSON_H
#define ROSPROLOG_MESSAGE_MESSAGEJSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosprolog
{
template <class ContainerAllocator>
struct MessageJSON_
{
  typedef MessageJSON_<ContainerAllocator> Type;

  MessageJSON_()
    : topic_name()
    , json_data()  {
    }
  MessageJSON_(const ContainerAllocator& _alloc)
    : topic_name(_alloc)
    , json_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_name_type;
  _topic_name_type topic_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_data_type;
  _json_data_type json_data;





  typedef boost::shared_ptr< ::rosprolog::MessageJSON_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosprolog::MessageJSON_<ContainerAllocator> const> ConstPtr;

}; // struct MessageJSON_

typedef ::rosprolog::MessageJSON_<std::allocator<void> > MessageJSON;

typedef boost::shared_ptr< ::rosprolog::MessageJSON > MessageJSONPtr;
typedef boost::shared_ptr< ::rosprolog::MessageJSON const> MessageJSONConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosprolog::MessageJSON_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosprolog::MessageJSON_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosprolog::MessageJSON_<ContainerAllocator1> & lhs, const ::rosprolog::MessageJSON_<ContainerAllocator2> & rhs)
{
  return lhs.topic_name == rhs.topic_name &&
    lhs.json_data == rhs.json_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosprolog::MessageJSON_<ContainerAllocator1> & lhs, const ::rosprolog::MessageJSON_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosprolog

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosprolog::MessageJSON_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosprolog::MessageJSON_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosprolog::MessageJSON_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosprolog::MessageJSON_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosprolog::MessageJSON_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosprolog::MessageJSON_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosprolog::MessageJSON_<ContainerAllocator> >
{
  static const char* value()
  {
    return "857e02159eb61b757a9aeb0effde4aa9";
  }

  static const char* value(const ::rosprolog::MessageJSON_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x857e02159eb61b75ULL;
  static const uint64_t static_value2 = 0x7a9aeb0effde4aa9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosprolog::MessageJSON_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosprolog/MessageJSON";
  }

  static const char* value(const ::rosprolog::MessageJSON_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosprolog::MessageJSON_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string topic_name\n"
"string json_data\n"
;
  }

  static const char* value(const ::rosprolog::MessageJSON_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosprolog::MessageJSON_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_name);
      stream.next(m.json_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MessageJSON_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosprolog::MessageJSON_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosprolog::MessageJSON_<ContainerAllocator>& v)
  {
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_name);
    s << indent << "json_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPROLOG_MESSAGE_MESSAGEJSON_H
