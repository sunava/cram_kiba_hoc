// Generated by gencpp from file iai_wsg_50_msgs/Status.msg
// DO NOT EDIT!


#ifndef IAI_WSG_50_MSGS_MESSAGE_STATUS_H
#define IAI_WSG_50_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace iai_wsg_50_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , status()
    , width(0.0)
    , speed(0.0)
    , acc(0.0)
    , force(0.0)
    , force_finger0(0.0)
    , force_finger1(0.0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(_alloc)
    , width(0.0)
    , speed(0.0)
    , acc(0.0)
    , force(0.0)
    , force_finger0(0.0)
    , force_finger1(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef float _width_type;
  _width_type width;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acc_type;
  _acc_type acc;

   typedef float _force_type;
  _force_type force;

   typedef float _force_finger0_type;
  _force_finger0_type force_finger0;

   typedef float _force_finger1_type;
  _force_finger1_type force_finger1;





  typedef boost::shared_ptr< ::iai_wsg_50_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_wsg_50_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::iai_wsg_50_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::iai_wsg_50_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::iai_wsg_50_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_wsg_50_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iai_wsg_50_msgs::Status_<ContainerAllocator1> & lhs, const ::iai_wsg_50_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.width == rhs.width &&
    lhs.speed == rhs.speed &&
    lhs.acc == rhs.acc &&
    lhs.force == rhs.force &&
    lhs.force_finger0 == rhs.force_finger0 &&
    lhs.force_finger1 == rhs.force_finger1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iai_wsg_50_msgs::Status_<ContainerAllocator1> & lhs, const ::iai_wsg_50_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iai_wsg_50_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_wsg_50_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_wsg_50_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_wsg_50_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f81f277f0ca50173382b0ca1424694b";
  }

  static const char* value(const ::iai_wsg_50_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f81f277f0ca5017ULL;
  static const uint64_t static_value2 = 0x3382b0ca1424694bULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_wsg_50_msgs/Status";
  }

  static const char* value(const ::iai_wsg_50_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string status\n"
"float32 width\n"
"float32 speed\n"
"float32 acc\n"
"float32 force\n"
"float32 force_finger0\n"
"float32 force_finger1\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::iai_wsg_50_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.width);
      stream.next(m.speed);
      stream.next(m.acc);
      stream.next(m.force);
      stream.next(m.force_finger0);
      stream.next(m.force_finger1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_wsg_50_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_wsg_50_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acc: ";
    Printer<float>::stream(s, indent + "  ", v.acc);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
    s << indent << "force_finger0: ";
    Printer<float>::stream(s, indent + "  ", v.force_finger0);
    s << indent << "force_finger1: ";
    Printer<float>::stream(s, indent + "  ", v.force_finger1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_WSG_50_MSGS_MESSAGE_STATUS_H
