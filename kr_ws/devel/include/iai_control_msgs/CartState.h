// Generated by gencpp from file iai_control_msgs/CartState.msg
// DO NOT EDIT!


#ifndef IAI_CONTROL_MSGS_MESSAGE_CARTSTATE_H
#define IAI_CONTROL_MSGS_MESSAGE_CARTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iai_control_msgs
{
template <class ContainerAllocator>
struct CartState_
{
  typedef CartState_<ContainerAllocator> Type;

  CartState_()
    : running(false)
    , error(0.0)
    , error_pos(0.0)
    , error_rot(0.0)
    , vel_norm(0.0)
    , elapsed_seconds(0.0)
    , ee_frame_name()
    , base_frame_name()  {
    }
  CartState_(const ContainerAllocator& _alloc)
    : running(false)
    , error(0.0)
    , error_pos(0.0)
    , error_rot(0.0)
    , vel_norm(0.0)
    , elapsed_seconds(0.0)
    , ee_frame_name(_alloc)
    , base_frame_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _running_type;
  _running_type running;

   typedef double _error_type;
  _error_type error;

   typedef double _error_pos_type;
  _error_pos_type error_pos;

   typedef double _error_rot_type;
  _error_rot_type error_rot;

   typedef double _vel_norm_type;
  _vel_norm_type vel_norm;

   typedef double _elapsed_seconds_type;
  _elapsed_seconds_type elapsed_seconds;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ee_frame_name_type;
  _ee_frame_name_type ee_frame_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _base_frame_name_type;
  _base_frame_name_type base_frame_name;





  typedef boost::shared_ptr< ::iai_control_msgs::CartState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_control_msgs::CartState_<ContainerAllocator> const> ConstPtr;

}; // struct CartState_

typedef ::iai_control_msgs::CartState_<std::allocator<void> > CartState;

typedef boost::shared_ptr< ::iai_control_msgs::CartState > CartStatePtr;
typedef boost::shared_ptr< ::iai_control_msgs::CartState const> CartStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_control_msgs::CartState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_control_msgs::CartState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iai_control_msgs::CartState_<ContainerAllocator1> & lhs, const ::iai_control_msgs::CartState_<ContainerAllocator2> & rhs)
{
  return lhs.running == rhs.running &&
    lhs.error == rhs.error &&
    lhs.error_pos == rhs.error_pos &&
    lhs.error_rot == rhs.error_rot &&
    lhs.vel_norm == rhs.vel_norm &&
    lhs.elapsed_seconds == rhs.elapsed_seconds &&
    lhs.ee_frame_name == rhs.ee_frame_name &&
    lhs.base_frame_name == rhs.base_frame_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iai_control_msgs::CartState_<ContainerAllocator1> & lhs, const ::iai_control_msgs::CartState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iai_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iai_control_msgs::CartState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_control_msgs::CartState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_control_msgs::CartState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_control_msgs::CartState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_control_msgs::CartState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_control_msgs::CartState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_control_msgs::CartState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fdee31b50bcb0376e81235255a47390";
  }

  static const char* value(const ::iai_control_msgs::CartState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fdee31b50bcb037ULL;
  static const uint64_t static_value2 = 0x6e81235255a47390ULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_control_msgs::CartState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_control_msgs/CartState";
  }

  static const char* value(const ::iai_control_msgs::CartState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_control_msgs::CartState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Report the state of the cartesian controller\n"
"bool running   # Is the controller active?\n"
"float64 error  # Represents distance to the goal\n"
"float64 error_pos # norm of the cartesian position error\n"
"float64 error_rot # norm of the cartesian orientation error\n"
"float64 vel_norm # norm of the commanded velocity vector\n"
"float64 elapsed_seconds # time since the last goal was set\n"
"\n"
"#geometry_msgs/PoseStamped goal_pose   # Has pose of the running goal\n"
"string ee_frame_name  # Frame at the end of the kin. chain\n"
"string base_frame_name # Frame at the beginning of the kin. chain\n"
"\n"
"\n"
;
  }

  static const char* value(const ::iai_control_msgs::CartState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_control_msgs::CartState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.running);
      stream.next(m.error);
      stream.next(m.error_pos);
      stream.next(m.error_rot);
      stream.next(m.vel_norm);
      stream.next(m.elapsed_seconds);
      stream.next(m.ee_frame_name);
      stream.next(m.base_frame_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_control_msgs::CartState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_control_msgs::CartState_<ContainerAllocator>& v)
  {
    s << indent << "running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.running);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "error_pos: ";
    Printer<double>::stream(s, indent + "  ", v.error_pos);
    s << indent << "error_rot: ";
    Printer<double>::stream(s, indent + "  ", v.error_rot);
    s << indent << "vel_norm: ";
    Printer<double>::stream(s, indent + "  ", v.vel_norm);
    s << indent << "elapsed_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.elapsed_seconds);
    s << indent << "ee_frame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ee_frame_name);
    s << indent << "base_frame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.base_frame_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_CONTROL_MSGS_MESSAGE_CARTSTATE_H
