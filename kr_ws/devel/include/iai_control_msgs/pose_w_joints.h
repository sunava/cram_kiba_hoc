// Generated by gencpp from file iai_control_msgs/pose_w_joints.msg
// DO NOT EDIT!


#ifndef IAI_CONTROL_MSGS_MESSAGE_POSE_W_JOINTS_H
#define IAI_CONTROL_MSGS_MESSAGE_POSE_W_JOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iai_control_msgs
{
template <class ContainerAllocator>
struct pose_w_joints_
{
  typedef pose_w_joints_<ContainerAllocator> Type;

  pose_w_joints_()
    : joint_values()  {
    }
  pose_w_joints_(const ContainerAllocator& _alloc)
    : joint_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_values_type;
  _joint_values_type joint_values;





  typedef boost::shared_ptr< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> const> ConstPtr;

}; // struct pose_w_joints_

typedef ::iai_control_msgs::pose_w_joints_<std::allocator<void> > pose_w_joints;

typedef boost::shared_ptr< ::iai_control_msgs::pose_w_joints > pose_w_jointsPtr;
typedef boost::shared_ptr< ::iai_control_msgs::pose_w_joints const> pose_w_jointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_control_msgs::pose_w_joints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iai_control_msgs::pose_w_joints_<ContainerAllocator1> & lhs, const ::iai_control_msgs::pose_w_joints_<ContainerAllocator2> & rhs)
{
  return lhs.joint_values == rhs.joint_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iai_control_msgs::pose_w_joints_<ContainerAllocator1> & lhs, const ::iai_control_msgs::pose_w_joints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iai_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50b3293f6e585f2a02888f333d3c3e8a";
  }

  static const char* value(const ::iai_control_msgs::pose_w_joints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50b3293f6e585f2aULL;
  static const uint64_t static_value2 = 0x02888f333d3c3e8aULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_control_msgs/pose_w_joints";
  }

  static const char* value(const ::iai_control_msgs::pose_w_joints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] joint_values\n"
;
  }

  static const char* value(const ::iai_control_msgs::pose_w_joints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_w_joints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_control_msgs::pose_w_joints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_control_msgs::pose_w_joints_<ContainerAllocator>& v)
  {
    s << indent << "joint_values[]" << std::endl;
    for (size_t i = 0; i < v.joint_values.size(); ++i)
    {
      s << indent << "  joint_values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_CONTROL_MSGS_MESSAGE_POSE_W_JOINTS_H
